<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>reflection on WampSharp</title><link>https://wampsharp.net/tags/reflection/</link><description>Recent content in reflection on WampSharp</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright (c) 2013-2020, Elad Zelingher; All rights reserved.</copyright><lastBuildDate>Sun, 30 Jul 2017 00:16:09 +0300</lastBuildDate><atom:link href="https://wampsharp.net/tags/reflection/index.xml" rel="self" type="application/rss+xml"/><item><title>Reflection-based Callee</title><link>https://wampsharp.net/wamp2/roles/callee/reflection-based-callee/</link><pubDate>Sun, 30 Jul 2017 00:16:09 +0300</pubDate><guid>https://wampsharp.net/wamp2/roles/callee/reflection-based-callee/</guid><description>Reflection-based Callee allows you to register classes instances with method decorated with a [WampProcedure] attribute as remote procedure operation to a WAMP realm.
Basic usage public interface IArgumentsService { [WampProcedure(&amp;#34;com.arguments.ping&amp;#34;)] void Ping(); [WampProcedure(&amp;#34;com.arguments.add2&amp;#34;)] int Add2(int a, int b); [WampProcedure(&amp;#34;com.arguments.stars&amp;#34;)] string Stars(string nick = &amp;#34;somebody&amp;#34;, int stars = 0); } public class ArgumentsService : IArgumentsService { public void Ping() { } public int Add2(int a, int b) { return a + b; } public string Stars(string nick = &amp;#34;somebody&amp;#34;, int stars = 0) { return string.</description></item><item><title>Reflection-based Caller</title><link>https://wampsharp.net/wamp2/roles/caller/reflection-based-caller/</link><pubDate>Sun, 30 Jul 2017 00:16:09 +0300</pubDate><guid>https://wampsharp.net/wamp2/roles/caller/reflection-based-caller/</guid><description>Reflection-based Caller (or &amp;ldquo;Callee proxy&amp;rdquo;) allows you to call callee methods of a WAMP realm, by declaring an interface with methods decorated with a [WampProcedure] attribute.
The interface must be public.
Basic usage public interface IArgumentsService { [WampProcedure(&amp;#34;com.arguments.add2&amp;#34;)] int Add2(int a, int b); } public static void Run() { DefaultWampChannelFactory factory = new DefaultWampChannelFactory(); const string serverAddress = &amp;#34;ws://127.0.0.1:8080/ws&amp;#34;; IWampChannel channel = factory.CreateJsonChannel(serverAddress, &amp;#34;realm1&amp;#34;); channel.Open().Wait(5000); IArgumentsService proxy = channel.RealmProxy.Services.GetCalleeProxy&amp;lt;IArgumentsService&amp;gt;(); int five = proxy.</description></item><item><title>Reflection-based Publisher</title><link>https://wampsharp.net/wamp2/roles/publisher/reflection-based-publisher/</link><pubDate>Sun, 30 Jul 2017 00:16:09 +0300</pubDate><guid>https://wampsharp.net/wamp2/roles/publisher/reflection-based-publisher/</guid><description>Reflection-based Publisher allows to use publisher features in a similar fashion as Reflection based Callee.
In order to use it, create a class containing an event decorated with a [WampTopic] attribute. Then register an instance of the class using the RegisterPublisher method of IWampRealmServiceProvider. The arguments published to the event will be treated as the arguments keywords of the publication.
Basic usage public class MyClass { [JsonProperty(&amp;#34;counter&amp;#34;)] public int Counter { get; set; } [JsonProperty(&amp;#34;foo&amp;#34;)] public int[] Foo { get; set; } } public delegate void MyPublicationDelegate(int number1, int number2, string c, MyClass d); public interface IMyPublisher { [WampTopic(&amp;#34;com.</description></item><item><title>Reflection-based Subscriber</title><link>https://wampsharp.net/wamp2/roles/subscriber/reflection-based-subscriber/</link><pubDate>Sun, 30 Jul 2017 00:16:09 +0300</pubDate><guid>https://wampsharp.net/wamp2/roles/subscriber/reflection-based-subscriber/</guid><description>Reflection-based Subscriber allows to use WAMPv2 subscriber features in a similar fashion as Reflection based Callee.
In order to use it, create a class with a method having a [WampTopic] attribute, Then call RegisterSubscriber of IWampRealmServiceProvider.
Both placing attributes on a class method and placing attributes on an interface implemented by the class are supported.
Basic usage public class MyClass { [JsonProperty(&amp;#34;counter&amp;#34;)] public int Counter { get; set; } [JsonProperty(&amp;#34;foo&amp;#34;)] public int[] Foo { get; set; } public override string ToString() { return string.</description></item></channel></rss>