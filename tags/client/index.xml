<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>client on WampSharp</title>
    <link>https://wampsharp.net/tags/client/</link>
    <description>Recent content in client on WampSharp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2013-2020, Elad Zelingher; All rights reserved.</copyright>
    <lastBuildDate>Sun, 30 Jul 2017 00:16:09 +0300</lastBuildDate>
    
	<atom:link href="https://wampsharp.net/tags/client/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Client-side authentication</title>
      <link>https://wampsharp.net/wamp2/client/client-side-authentication/</link>
      <pubDate>Sun, 30 Jul 2017 00:16:09 +0300</pubDate>
      
      <guid>https://wampsharp.net/wamp2/client/client-side-authentication/</guid>
      <description>Client-side authentication is supported. In order to use client authentication, you need to implement an interface named IWampClientAuthenticator. Then, pass it to CreateChannel/CreateJsonChannel/CreateMsgpackChannel overloads of DefaultChannelFactory. In IWampClientAuthenticator we supply the supported authentication methods and the authenticationid, these are passed in the HELLO message to the router (as details.authmethods, details.authid). We also implement Authenticate method, which sends an AUTHENTICATE message to the router upon CHALLENGE.
Example public class TicketAuthenticator : IWampClientAuthenticator{private static readonly string[] mAuthenticationMethods = { &amp;#34;ticket&amp;#34; };private readonly IDictionary&amp;lt;string, string&amp;gt; mTickets =new Dictionary&amp;lt;string, string&amp;gt;(){{&amp;#34;peter&amp;#34;, &amp;#34;magic_secret_1&amp;#34;},{&amp;#34;joe&amp;#34;, &amp;#34;magic_secret_2&amp;#34;}};private const string User = &amp;#34;peter&amp;#34;;public AuthenticationResponse Authenticate(string authmethod, ChallengeDetails extra){if (authmethod == &amp;#34;ticket&amp;#34;){Console.</description>
    </item>
    
    <item>
      <title>Meta-api descriptor service</title>
      <link>https://wampsharp.net/wamp2/meta-api-service/</link>
      <pubDate>Sun, 30 Jul 2017 00:16:09 +0300</pubDate>
      
      <guid>https://wampsharp.net/wamp2/meta-api-service/</guid>
      <description>WampSharp implements WAMP meta-api (i.e. session meta api, registration meta api and subscription meta api). It is possible both to consume WAMP meta-api from a WampSharp client, and to expose it from a WampSharp router.
Exposing meta-api In order to expose meta-api, you can call an extension method of IWampHostedRealm, named &amp;ldquo;HostMetaApiService&amp;rdquo;. This method returns an IDisposable which you can dispose in order to unregister the meta-api service.
 Note: it is important to call HostMetaApiService before hosting any other components (callees/subscribers), since otherwise the meta-api service isn&#39;t be able to track components registered before it.</description>
    </item>
    
    <item>
      <title>Testament service</title>
      <link>https://wampsharp.net/wamp2/testament-service/</link>
      <pubDate>Sun, 30 Jul 2017 00:16:09 +0300</pubDate>
      
      <guid>https://wampsharp.net/wamp2/testament-service/</guid>
      <description>The Testament feature is supported.
This feature allows a client to request the router to publish some predefined events when the client disconnects.
Enabling the testament service on the router-side In order to enable it from router-side, call HostTestamentService extension method of the relevant realm (this is similiar to the Router-side meta-api usage):
DefaultWampHost host = new DefaultWampHost(&amp;#34;ws://127.0.0.1:8080/ws&amp;#34;);IWampHostedRealm realm = host.RealmContainer.GetRealmByName(&amp;#34;realm1&amp;#34;);IDisposable disposable = realm.HostTestamentService();// Uncomment to unregister the Testament service.</description>
    </item>
    
    <item>
      <title>WAMP-CRA client side authentication</title>
      <link>https://wampsharp.net/wamp2/client/wamp-cra-client-side-authentication/</link>
      <pubDate>Sun, 30 Jul 2017 00:16:09 +0300</pubDate>
      
      <guid>https://wampsharp.net/wamp2/client/wamp-cra-client-side-authentication/</guid>
      <description>WAMP-CRA client side authentication is supported. In order to use it, instantiate a new instance of WampCraAuthenticator and pass it to the channel factory.
Example public async Task Run(){DefaultWampChannelFactory channelFactory = new DefaultWampChannelFactory();IWampClientAuthenticator authenticator;if (false){authenticator = new WampCraClientAuthenticator(authenticationId: &amp;#34;joe&amp;#34;, secret: &amp;#34;secret2&amp;#34;);}else{authenticator =new WampCraClientAuthenticator(authenticationId: &amp;#34;peter&amp;#34;, secret: &amp;#34;secret1&amp;#34;, salt: &amp;#34;salt123&amp;#34;,iterations: 100, keyLen: 16);}IWampChannel channel =channelFactory.CreateJsonChannel(&amp;#34;ws://127.0.0.1:8080/ws&amp;#34;,&amp;#34;realm1&amp;#34;,authenticator);channel.</description>
    </item>
    
    <item>
      <title>WampChannel</title>
      <link>https://wampsharp.net/wamp2/client/wampchannel/</link>
      <pubDate>Sun, 30 Jul 2017 00:16:09 +0300</pubDate>
      
      <guid>https://wampsharp.net/wamp2/client/wampchannel/</guid>
      <description>A WampChannel is an object that represents a WAMP client session to a remote router.
In order to obtain a WampChannel, instantiate an instance of the WampChannelFactory class, and call CreateChannel with the desired realm to connect to, the desired WampConnection and the desired binding.
For example: connecting to a remote router with Msgpack support and WebSocket4NetConnection:
const string serverAddress = &amp;#34;ws://127.0.0.1:8080/ws&amp;#34;;WampChannelFactory factory = new WampChannelFactory();JTokenMsgpackBinding msgpackBinding = new JTokenMsgpackBinding();IWampChannel channel =factory.</description>
    </item>
    
    <item>
      <title>WampChannelReconnector</title>
      <link>https://wampsharp.net/wamp2/client/wampchannelreconnector/</link>
      <pubDate>Sun, 30 Jul 2017 00:16:09 +0300</pubDate>
      
      <guid>https://wampsharp.net/wamp2/client/wampchannelreconnector/</guid>
      <description>The WampChannelReconnector class helps handling re-connection of WampChannel.
Usage sample:
public static async Task Run(){DefaultWampChannelFactory factory = new DefaultWampChannelFactory();string address = &amp;#34;ws://localhost:8080/ws&amp;#34;;MySubscriber mySubscriber = new MySubscriber();IWampChannel channel =factory.CreateJsonChannel(address, &amp;#34;realm1&amp;#34;);Func&amp;lt;Task&amp;gt; connect = async () =&amp;gt;{await channel.Open();var subscriptionTask =channel.RealmProxy.Services.RegisterSubscriber(mySubscriber);var asyncDisposable = await subscriptionTask;};WampChannelReconnector reconnector =new WampChannelReconnector(channel, connect);reconnector.Start();}</description>
    </item>
    
  </channel>
</rss>