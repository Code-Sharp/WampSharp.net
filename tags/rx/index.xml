<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rx on WampSharp</title><link>https://wampsharp.net/tags/rx/</link><description>Recent content in rx on WampSharp</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright (c) 2013-2020, Elad Zelingher; All rights reserved.</copyright><lastBuildDate>Sun, 30 Jul 2017 00:16:09 +0300</lastBuildDate><atom:link href="https://wampsharp.net/tags/rx/index.xml" rel="self" type="application/rss+xml"/><item><title>Rx-based Publisher</title><link>https://wampsharp.net/wamp2/roles/publisher/rx-based-publisher/</link><pubDate>Sun, 30 Jul 2017 00:16:09 +0300</pubDate><guid>https://wampsharp.net/wamp2/roles/publisher/rx-based-publisher/</guid><description>Rx-based Publisher allows you to publish events to a topic of a WAMP router realm, using Reactive Extensions Observer api.
Basic usage private static async Task Main() { const string serverAddress = &amp;#34;ws://127.0.0.1:8080/ws&amp;#34;; DefaultWampChannelFactory channelFactory = new DefaultWampChannelFactory(); IWampChannel channel = channelFactory.CreateJsonChannel(serverAddress, &amp;#34;realm1&amp;#34;); await channel.Open().ConfigureAwait(false); IWampRealmProxy realm = channel.RealmProxy; ISubject&amp;lt;int&amp;gt; subject = realm.Services.GetSubject&amp;lt;int&amp;gt;(&amp;#34;com.myapp.topic1&amp;#34;); // Publishes 5 to com.myapp.topic1 subject.OnNext(5); } GetSubject overloads If a generic type is specified in the GetSubject method, the ARGUMENTS parameter of the EVENT message will contain the single parameter OnNext receives.</description></item><item><title>Rx-based Subscriber</title><link>https://wampsharp.net/wamp2/roles/subscriber/rx-based-subscriber/</link><pubDate>Sun, 30 Jul 2017 00:16:09 +0300</pubDate><guid>https://wampsharp.net/wamp2/roles/subscriber/rx-based-subscriber/</guid><description>Rx-based Subscriber allows you to subscribe to events of a topic of a WAMP router realm, using Reactive Extensions Observable api.
Basic usage private static async Task Main() { DefaultWampChannelFactory factory = new DefaultWampChannelFactory(); const string serverAddress = &amp;#34;ws://127.0.0.1:8080/ws&amp;#34;; IWampChannel channel = factory.CreateJsonChannel(serverAddress, &amp;#34;realm1&amp;#34;); await channel.Open().ConfigureAwait(false); IWampRealmProxy realmProxy = channel.RealmProxy; IDisposable subscription = realmProxy.Services.GetSubject&amp;lt;int&amp;gt;(&amp;#34;com.myapp.topic1&amp;#34;) .Subscribe(x =&amp;gt; { Console.WriteLine($&amp;#34;Got Event: {x}&amp;#34;); }); // This line is required in order to release the WebSocket thread, otherwise it will be blocked by the Console.</description></item></channel></rss>